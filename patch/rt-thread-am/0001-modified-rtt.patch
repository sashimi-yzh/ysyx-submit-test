From ddc0e4ac0e17cb16500db008e37c2f212bf749a7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E8=96=9B=E6=B5=B7=E6=B4=8B?= <993994957@qq.com>
Date: Sat, 26 Jul 2025 18:16:02 +0800
Subject: [PATCH 1/2] modified rtt

---
 bsp/abstract-machine/src/context.c | 55 +++++++++++++++++++++++++++---
 1 file changed, 50 insertions(+), 5 deletions(-)

diff --git a/bsp/abstract-machine/src/context.c b/bsp/abstract-machine/src/context.c
index ee38829ae..f80c39785 100644
--- a/bsp/abstract-machine/src/context.c
+++ b/bsp/abstract-machine/src/context.c
@@ -4,6 +4,13 @@
 
 static Context* ev_handler(Event e, Context *c) {
   switch (e.event) {
+    case EVENT_YIELD:  {
+      printf("ev_handler\n");
+      rt_thread_t cp = rt_thread_self(); 
+      rt_ubase_t to = cp->user_data;
+      c = *(Context**)to;
+      break;
+    }
     default: printf("Unhandled event ID = %d\n", e.event); assert(0);
   }
   return c;
@@ -14,18 +21,56 @@ void __am_cte_init() {
 }
 
 void rt_hw_context_switch_to(rt_ubase_t to) {
-  assert(0);
+  rt_thread_t pcb = rt_thread_self();
+  rt_ubase_t user_data_replicator = pcb->user_data;
+  pcb->user_data = to;
+  printf("yield switch_to\n");
+  yield();
+  pcb->user_data = user_data_replicator;
 }
 
 void rt_hw_context_switch(rt_ubase_t from, rt_ubase_t to) {
-  assert(0);
+  rt_thread_t pcb = rt_thread_self();
+  rt_ubase_t user_data_replicator = pcb->user_data;
+  pcb->user_data = to;
+  *(Context**)from = pcb->sp;
+  printf("yield switch\n");
+  yield();
+  pcb->user_data = user_data_replicator;
 }
 
 void rt_hw_context_switch_interrupt(void *context, rt_ubase_t from, rt_ubase_t to, struct rt_thread *to_thread) {
   assert(0);
 }
 
-rt_uint8_t *rt_hw_stack_init(void *tentry, void *parameter, rt_uint8_t *stack_addr, void *texit) {
-  assert(0);
-  return NULL;
+void wrap(void *arg) {
+  // parse paramater
+  rt_ubase_t *stack_bottom = (rt_ubase_t *)arg;
+  rt_ubase_t tentry = *stack_bottom; 
+  stack_bottom--;
+  rt_ubase_t texit = *stack_bottom; 
+  stack_bottom--;
+  rt_ubase_t parameter = *stack_bottom; 
+  // function call
+  ((void(*)())tentry) (parameter);
+  ((void(*)())texit) ();
 }
+
+rt_uint8_t *rt_hw_stack_init(void *tentry, void *parameter, rt_uint8_t *stack_addr, void *texit) {
+  // align
+  stack_addr = (rt_uint8_t*)((uintptr_t)stack_addr & ~(sizeof(uintptr_t) - 1));
+  // create context
+  Area stack;
+  stack.start = stack_addr - 1024;
+  stack.end = stack_addr;
+  Context *cp = kcontext(stack, wrap, (void *)(stack.end - sizeof(Context) - 4));
+  // set parameter
+  rt_ubase_t *stack_bottom = (rt_ubase_t *)(stack.end - sizeof(Context) - 4);
+  *stack_bottom = (rt_ubase_t)tentry;
+  stack_bottom--;
+  *stack_bottom = (rt_ubase_t)texit;
+  stack_bottom--;
+  *stack_bottom = (rt_ubase_t)parameter;
+
+  return (rt_uint8_t *)cp;
+}
\ No newline at end of file
-- 
2.34.1

